services:
  main:
    container_name: main
    build:
      context: .
      dockerfile: ./build/main.Dockerfile
    depends_on:
      redis:
        condition: service_started
      minio:
        condition: service_started
      postgres:
        condition: service_started
    restart: always
    env_file:
      - .env
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      - purify-network
    volumes:
      - type: bind
        source: ${LOG_DIRECTORY}
        target: /var/log/purify

  nlp_words:
    container_name: nlp_words
    build:
      context: .
      dockerfile: ./nlp_words_app/Dockerfile
    depends_on:
      redis:
        condition: service_started
    env_file:
      - .env
    ports:
      - "127.0.0.1:5001:5001"
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PYTHONUNBUFFERED=1
    volumes:
      - ./nlp_words_app:/app
    command: [ "python", "app.py" ]
    networks:
      - purify-network

  easy_ocr:
    container_name: easy_ocr
    build:
      context: .
      dockerfile: ./easy_ocr_app/Dockerfile
    env_file:
      - .env
    ports:
      - "127.0.0.1:5002:5002"
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./easy_ocr_app/app.py:/app/app.py  
      - ./easy_ocr_app/make_inference.py:/app/make_inference.py  
      - ./easy_ocr_app/config.yaml:/app/config.yaml
    command: [ "python", "app.py" ]
    networks:
      - purify-network

  redis:
    image: redis:latest
    container_name: redis
    env_file:
      - .env
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
      - redis-data:/data
    command: [ "redis-server", "/etc/redis/redis.conf" ]
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - purify-network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "127.0.0.1:9000:9000"       # API
      - "9001:9001"                 # Web UI
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    networks:
      - purify-network

  nginx:
     container_name: nginx
     image: nginx
     depends_on:
       main:
         condition: service_started
     volumes:
       - type: bind
         source: /etc/letsencrypt/live/purify.pro/fullchain.pem
         target: /etc/letsencrypt/live/purify.pro/fullchain.pem
       - type: bind
         source: /etc/letsencrypt/live/purify.pro/privkey.pem
         target: /etc/letsencrypt/live/purify.pro/privkey.pem
       - type: bind
         source: /var/log/nginx/
         target: /var/log/nginx/
       - type: bind
         source: /opt/public/
         target: /opt/public/
       - type: bind
         source: /opt/ext/
         target: /opt/ext/
       - type: bind
         source: ./nginx.conf
         target: /etc/nginx/nginx.conf
     ports:
       - "443:443"
       - "80:80"
     networks:
       - purify-network

  postgres:
    env_file:
      - .env
    container_name: postgres
    image: postgres:16.0
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - ./build/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
      - postgres-data:/var/lib/postgresql/data
    networks:
      - purify-network
  video_processing_service:
    container_name: video_processing_service
    build:
      context: ./video_processing_service
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "127.0.0.1:5003:5003"
    restart: unless-stopped
    volumes:
      - ./video_processing_service:/app
    networks:
      - purify-network

networks:
  purify-network:
    name: purify-network
    driver: bridge

volumes:
  redis-data:
  minio_data:
  postgres-data: